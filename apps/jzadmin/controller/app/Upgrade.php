<?php
/**
 * Created by PhpStorm.
 * User: huanghaiping
 * Date: 2017/11/28
 * Time: 11:48
 */

namespace app\jzadmin\controller\app;
use app\jzadmin\controller\Common;

class Upgrade extends  Common
{
    protected $appUpgradeModel;

    public function  _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        $this->appUpgradeModel=model("app.AppUpgrade");
    }


    /**
     * 升级接口管理
     */
    public function index(){
        $param = $this->request->param();
        $keyword = isset ($param ['keyword']) ? addSlashesFun($param ['keyword']) : "";
        $where = array();
        if (!empty ($keyword)) {
            $where ['version_code'] = array('like', '%' . $keyword . '%');
        }
        $request = array('status');
        foreach ($request as $value) {
            $status = isset ($param [$value]) ? $param [$value] : "";
            if ($status != "") {
                $where [$value] = $status;
                $this->assign($value, $status);
            }
        }
        $appModel=model("App");
        $appVersionList = $this->appUpgradeModel->where($where)->order("id desc")->paginate(20, false, array("query" => $param));
        if (!$appVersionList->isEmpty()){
            $appList=$appModel->getAppListByIds(array_unique(getSubByKey($appVersionList->all(),"app_id")));
            $upgradeType=$this->appUpgradeModel->upgradeType();
            foreach ($appVersionList as $key=>$value){
                $value['appInfo']=$appList && array_key_exists($value['app_id'],$appList) ? $appList[$value['app_id']] : array();
                $value['upgradeInfo']=$upgradeType && array_key_exists($value['upgrade_type'],$upgradeType) ? $upgradeType[$value['upgrade_type']] : "";
                $appVersionList[$key]=$value;

            }
        }
        return $this->fetch('', array('keyword' => $keyword, 'list' => $appVersionList, 'page' => $appVersionList->render()));
    }

    /**
     * 添加应用的版本控制
     */
    public function  add(){
        if ($this->request->isPost()){
            $addResult=$this->appUpgradeModel->createVersionData($this->request->post());
            if ($addResult){
                $this->success("添加成功");
            }else{
                $this->error("添加失败：".$this->appModel->getError());
            }

        }else{
            $appModel=model("App");
            $appList=$appModel->where("status",1)->order("id desc")->field("id,appname")->select();
            $this->assign("appList",$appList);
            return $this->fetch('add',array('method'=>'add','upgradeType'=>$this->appUpgradeModel->upgradeType()));
        }
    }

    /**
     * 修改应用的版本控制
     */
    public function edit(){
        $param=$this->request->param();
        $id=isset($param['id']) ? intval($param['id']) : 0;
        if (empty($id))
            $this->error("参数错误");
        if ($this->request->isPost()){
            $addResult=$this->appUpgradeModel->createVersionData($this->request->post());
            if ($addResult){
                $this->success("修改成功");
            }else{
                $this->error("修改失败：".$this->appModel->getError());
            }
        }else{
            $info=$this->appUpgradeModel->where("id",$id)->limit(1)->find();
            $appModel=model("App");
            $appList=$appModel->where("status",1)->order("id desc")->field("id,appname")->select();
            $this->assign("appList",$appList);
            return $this->fetch('add',array('method'=>'edit','info'=>$info,'upgradeType'=>$this->appUpgradeModel->upgradeType()));
        }
    }

    /**
     * 删除应用的版本控制
     */
    public function del(){
        $param=$this->request->param();
        $id=isset($param['id']) ? intval($param['id']) : 0;
        if (empty($id))
            $this->error("参数错误");
        $data=$this->appUpgradeModel->where("id",$id)->field("app_id,version_id")->limit(1)->find();
        if (!$data){
            $this->error("参数错误");
        }
        $result=$this->appUpgradeModel->where("id",$id)->delete();
        if ($result){
            cache(md5($data['app_id']."_".$data['version_id']),null,array('path'=>DATA_PATH));
            $this->success("删除成功");
        }else{
            $this->error("删除失败");
        }
    }

    /**
     * 升级的日志
     */
    public function applog(){
        $param = $this->request->param();
        $id=isset($param['id']) ? intval($param['id']) : 0;
        if (empty($id))
            $this->error("参数错误");

        $keyword = isset ($param ['keyword']) ? addSlashesFun($param ['keyword']) : "";
        $where = array('to_upgrade_id'=>$id);
        if (!empty ($keyword)) {
            $where ['from_version_code|to_version_code'] = array('like', '%' . $keyword . '%');
        }
        $request = array('status');
        foreach ($request as $value) {
            $status = isset ($param [$value]) ? $param [$value] : "";
            if ($status != "") {
                $where [$value] = $status;
                $this->assign($value, $status);
            }
        }
        $appLogList = model("app.AppLog")->where($where)->order("id desc")->paginate(20, false, array("query" => $param));
        if (!$appLogList->isEmpty()){
            $appList=model("App")->getAppListByIds(array_unique(getSubByKey($appLogList->all(),"app_id")));
            $userList=model("User")->getUserInfoByUids(array_unique(getSubByKey($appLogList->all(),"uid")));
            foreach ($appLogList as $key=>$value){
                $value['appInfo']=$appList && array_key_exists($value['app_id'],$appList) ? $appList[$value['app_id']] : array();
                $value['userInfo']=$userList && array_key_exists($value['uid'],$userList) ? $userList[$value['uid']] : array();
                $appLogList[$key]=$value;

            }
        }
        return $this->fetch('', array('keyword' => $keyword, 'list' => $appLogList, 'page' => $appLogList->render(),'id'=>$id));
    }

}